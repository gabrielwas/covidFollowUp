{"version":3,"sources":["stateClient/stateCoronaFollow.js","stateClient/client.js","basicComponents/ListItemIns.js","components/SimpleMenu.js","basicComponents/UpperBar.js","components/ListCountries.js","chartComponents/LineVis.js","pages/GeneralCharts.js","chartComponents/MyResponsiveBar.js","pages/DeathChart.js","components/PageBase.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","useStateValue","useContext","initialState","countryData","undefined","allData","countries","selectedCountry","activeStep","reducer","state","action","type","property","info","getCountryData","countryName","data","result","id","forEach","date","confirmed","recovered","deaths","fixedDate","Date","parsedDate","find","push","x","y","days","months","getDeaths","prevDay","deathData","day","startDate","setDate","getDate","iDate","dayWeek","getDay","dayOfMonth","month","getMonth","ListItemIns","name","nextStep","icon","dispatch","ListItem","button","key","onClick","ListItemIcon","ListItemText","primary","SimpleMenu","React","useState","anchorEl","setAnchorEl","IconButton","edge","color","aria-label","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","List","useStyles","makeStyles","theme","appBar","zIndex","drawer","UpperBar","classes","CssBaseline","AppBar","position","className","Toolbar","Grid","justify","container","item","Typography","variant","noWrap","listConfig","backgroundColor","palette","background","paper","overflow","maxHeight","ListCountries","component","map","progression","style","secondary","cases","toLocaleString","ITEMS","title","strokeWidth","LineVis","xType","margin","right","left","orientation","top","items","curve","root","width","height","card","flexGrow","GeneralCharts","spacing","alignItems","sm","md","Chip","label","Box","p","Paper","elevation","MyResponsiveBar","keys","indexBy","bottom","padding","colors","scheme","defs","size","stagger","rotation","lineWidth","fill","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","animate","motionStiffness","motionDamping","DeathChart","xs","display","PageStep","step","PageBase","content","toolbar","mixins","App","useReducer","useEffect","fetch","then","response","json","Object","entries","value","confirmedCasesLast","length","confirmedCasesBeforeLast","newCountry","sort","a","b","Provider","window","location","hostname","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfb4cfaf.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\n\nexport const StateContext = createContext();\nexport const useStateValue = () => useContext(StateContext);\n\nexport const initialState = {\n  countryData: undefined,\n  allData: undefined,\n  countries: undefined,\n  selectedCountry: \"Brazil\",\n  activeStep: 1,\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"updateProperty\":\n      return {\n        ...state,\n        [action.property]: action.info,\n      };\n\n    case \"updateSelectedCountry\":\n      return {\n        ...state,\n        selectedCountry: action.info,\n      };\n\n    default:\n      return state;\n  }\n};\n","export const getData = () => {\n  return fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      return data;\n    });\n};\n\nexport const getCountries = () => {\n  return fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      const countries = [];\n\n      for (let [key, value] of Object.entries(data)) {\n        const confirmedCasesLast =\n          value[value.length - 1].confirmed - value[value.length - 1].recovered;\n        const confirmedCasesBeforeLast =\n          value[value.length - 2].confirmed - value[value.length - 2].recovered;\n\n        let newCountry = {\n          name: key,\n          cases: value[value.length - 1].confirmed,\n          progression:\n            confirmedCasesLast < confirmedCasesBeforeLast ? false : true,\n        };\n        countries.push(newCountry);\n      }\n\n      countries.sort((a, b) => (a.cases < b.cases ? 1 : -1));\n\n      return countries;\n    });\n};\n\nexport const getCountryData = (countryName, data) => {\n  const result = [\n    {\n      id: \"Mortes\",\n      data: [],\n    },\n    {\n      id: \"Recuperados\",\n      data: [],\n    },\n    {\n      id: \"Casos Ativos\",\n      data: [],\n    },\n    {\n      id: \"Confirmados\",\n      data: [],\n    },\n  ];\n\n  data[countryName].forEach(({ date, confirmed, recovered, deaths }) => {\n    let fixedDate = new Date(\"2020-03-03\");\n    let parsedDate = new Date(date);\n\n    if (parsedDate > fixedDate) {\n      result\n        .find(({ id }) => id === \"Confirmados\")\n        .data.push({\n          x: parsedDate,\n          y: confirmed,\n        });\n\n      result\n        .find(({ id }) => id === \"Recuperados\")\n        .data.push({\n          x: parsedDate,\n          y: recovered,\n        });\n\n      result\n        .find(({ id }) => id === \"Mortes\")\n        .data.push({\n          x: parsedDate,\n          y: deaths,\n        });\n\n      result\n        .find(({ id }) => id === \"Casos Ativos\")\n        .data.push({\n          x: parsedDate,\n          y: confirmed - recovered,\n        });\n    }\n  });\n\n  return result;\n};\n\nvar days = [\"Dom\", \"Seg\", \"Ter\", \"Qua\", \"Qui\", \"Sex\", \"Sab\"];\nvar months = [\n  \"Jan\",\n  \"Fev\",\n  \"Mar\",\n  \"Abr\",\n  \"Mai\",\n  \"Jun\",\n  \"Jul\",\n  \"Ago\",\n  \"Set\",\n  \"Out\",\n  \"Nov\",\n  \"Dez\",\n];\n\nexport const getDeaths = (countryData) => {\n  const deathData = [];\n\n  let prevDay;\n\n  countryData\n    .find(({ id }) => id === \"Mortes\")\n    .data.forEach((day) => {\n      let startDate = new Date();\n\n      startDate.setDate(startDate.getDate() - 15);\n\n      const iDate = new Date(day.x);\n      if (iDate > startDate) {\n        const dayWeek = days[iDate.getDay()];\n        const dayOfMonth = iDate.getDate();\n        const month = months[iDate.getMonth()];\n\n        deathData.push({\n          date: `${dayWeek} ${dayOfMonth} ${month}`,\n          deaths: day.y - prevDay.y,\n        });\n      }\n\n      prevDay = day;\n    });\n\n  return deathData;\n};\n","import React from \"react\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\n\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\n\nconst ListItemIns = ({ name, nextStep, icon }) => {\n  const { dispatch } = useStateValue();\n\n  return (\n    <ListItem\n      button\n      key={name}\n      onClick={() =>\n        dispatch({\n          type: \"updateProperty\",\n          property: \"activeStep\",\n          info: nextStep\n        })\n      }\n    >\n      <ListItemIcon>{icon}</ListItemIcon>\n      <ListItemText primary={name} />\n    </ListItem>\n  );\n};\n\nexport default ListItemIns;\n","import React from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ListItemIns from \"../basicComponents/ListItemIns\";\nimport List from \"@material-ui/core/List\";\n\nimport ShowChartIcon from \"@material-ui/icons/ShowChart\";\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\n\nexport default function SimpleMenu() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <IconButton\n        edge=\"start\"\n        color=\"inherit\"\n        aria-label=\"menu\"\n        aria-controls=\"simple-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MenuIcon />\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <List>\n          <ListItemIns\n            name={\"Gráfico Geral\"}\n            nextStep={1}\n            icon={<ShowChartIcon />}\n          />\n\n          <ListItemIns name={\"Mortes\"} nextStep={2} icon={<EqualizerIcon />} />\n        </List>\n      </Menu>\n    </>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport SimpleMenu from \"../components/SimpleMenu\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n}));\n\nconst UpperBar = ({ name }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Grid\n            justify=\"space-between\" // Add it here :)\n            container\n          >\n             <Grid item>\n              <SimpleMenu />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h6\" noWrap>\n                {name}\n              </Typography>\n            </Grid>\n\n           \n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\nexport default UpperBar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport { getCountryData } from \"../stateClient/client\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nconst useStyles = makeStyles((theme) => ({\n  listConfig: {\n    backgroundColor: theme.palette.background.paper,\n    position: \"relative\",\n    overflow: \"auto\",\n    maxHeight: \"85vh\",\n  },\n}));\n\nconst ListCountries = () => {\n  const { state, dispatch } = useStateValue();\n  const classes = useStyles();\n\n  const onChangeCountry = (countryName) => {\n    dispatch({\n      type: \"updateProperty\",\n      property: \"selectedCountry\",\n      info: countryName,\n    });\n\n    dispatch({\n      type: \"updateProperty\",\n      property: \"countryData\",\n      info: getCountryData(countryName, state.allData),\n    });\n  };\n\n  return (\n    <div className={classes.listConfig}>\n      <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n        {state.countries &&\n          state.countries.map((item) => (\n            <ListItem\n              key={item.name}\n              button\n              onClick={() => onChangeCountry(item.name)}\n            >\n              {item.progression ? (\n                <ListItemIcon>\n                  <ArrowUpwardIcon style={{ color: \"#ff3300\" }} />\n                </ListItemIcon>\n              ) : (\n                <ListItemIcon>\n                  <ArrowDownwardIcon style={{ color: \"#33cc33\" }} />\n                </ListItemIcon>\n              )}\n\n              <ListItemText\n                primary={item.name}\n                secondary={\"Casos: \" + item.cases.toLocaleString(\"pt-BR\")}\n              />\n            </ListItem>\n          ))}\n      </List>\n    </div>\n  );\n};\n\nexport default ListCountries;\n","import React from \"react\";\n\nimport \"../../node_modules/react-vis/dist/style.css\";\n\nimport {\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  FlexibleXYPlot,\n  LineMarkSeries,\n  DiscreteColorLegend,\n} from \"react-vis\";\n\nconst ITEMS = [\n  { title: \"Confirmados\", color: \"#3498DB\", strokeWidth: 12 },\n  { title: \"Casos Ativos\", color: \"#F1C40F\", strokeWidth: 12 },\n  { title: \"Recuperados\", color: \"#16A085\", strokeWidth: 12 },\n  { title: \"Mortes\", color: \"#E74C3C\", strokeWidth: 12 },\n];\n\nconst LineVis = ({ data }) => {\n  return (\n    <FlexibleXYPlot xType=\"time\" margin={{ right: 65, left: 10 }}>\n      <HorizontalGridLines />\n      <VerticalGridLines />\n      <XAxis />\n      <YAxis orientation=\"right\" />\n      <DiscreteColorLegend\n        style={{ position: \"absolute\", left: \"5%\", top: \"5%\" }}\n        items={ITEMS}\n      />\n\n      <LineMarkSeries\n        className=\"linemark-series-example-2\"\n        curve={\"curveMonotoneX\"}\n        data={data[3].data}\n        color=\"#3498DB\"\n      />\n\n      <LineMarkSeries\n        className=\"linemark-series-example-2\"\n        curve={\"curveMonotoneX\"}\n        data={data[2].data}\n        color=\"#F1C40F\"\n      />\n\n      <LineMarkSeries\n        className=\"linemark-series-example-2\"\n        curve={\"curveMonotoneX\"}\n        data={data[1].data}\n        color=\"#16A085\"\n      />\n\n      <LineMarkSeries\n        className=\"linemark-series-example-2\"\n        curve={\"curveMonotoneX\"}\n        data={data[0].data}\n        color=\"#E74C3C\"\n      />\n    </FlexibleXYPlot>\n  );\n};\n\nexport default LineVis;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ListCountries from \"../components/ListCountries\";\nimport Chip from \"@material-ui/core/Chip\";\n\nimport LineVis from \"../chartComponents/LineVis\";\n\nimport Box from \"@material-ui/core/Box\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  card: {\n    flexGrow: 1,\n  },\n}));\n\nconst GeneralCharts = () => {\n  const { state } = useStateValue();\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2} alignItems=\"center\" justify=\"center\" style={{}}>\n      <Grid item sm={12} md={10}>\n        <Grid container spacing={0} className={classes.root}>\n          <Grid item sm={12} md={12}>\n            <Chip label={state.selectedCountry} />\n          </Grid>\n\n          <Grid item sm={12} md={12}>\n            <Box p={1}>\n              <div style={{ height: \"85vh\", width: \"80vw\" }}>\n                <Paper className={classes.root} elevation={3}>\n                  {state.countryData && <LineVis data={state.countryData} />}\n                </Paper>\n              </div>\n            </Box>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid item sm={12} md={2}>\n        <Box>\n          <ListCountries />\n        </Box>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default GeneralCharts;\n","import React from \"react\";\nimport { ResponsiveBar } from \"@nivo/bar\";\n\nconst MyResponsiveBar = ({ data }) => {\n  return (\n    <ResponsiveBar\n      data={data}\n      keys={[\"deaths\"]}\n      indexBy=\"date\"\n      margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n      padding={0.3}\n      colors={{ scheme: \"set1\" }}\n      defs={[\n        {\n          id: \"dots\",\n          type: \"patternDots\",\n          background: \"inherit\",\n          color: \"#38bcb2\",\n          size: 4,\n          padding: 1,\n          stagger: true,\n        },\n        {\n          id: \"lines\",\n          type: \"patternLines\",\n          background: \"inherit\",\n          color: \"#eed312\",\n          rotation: -45,\n          lineWidth: 6,\n          spacing: 10,\n        },\n      ]}\n      fill={[\n        {\n          match: {\n            id: \"fries\",\n          },\n          id: \"dots\",\n        },\n        {\n          match: {\n            id: \"sandwich\",\n          },\n          id: \"lines\",\n        },\n      ]}\n      borderColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Dia\",\n        legendPosition: \"middle\",\n        legendOffset: 32,\n      }}\n      axisLeft={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Quantidade\",\n        legendPosition: \"middle\",\n        legendOffset: -50,\n      }}\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      labelTextColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\n      legends={[]}\n      animate={true}\n      motionStiffness={90}\n      motionDamping={15}\n    />\n  );\n};\n\nexport default MyResponsiveBar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ListCountries from \"../components/ListCountries\";\nimport MyResponsiveBar from \"../chartComponents/MyResponsiveBar\";\n\nimport { getDeaths } from \"../stateClient/client\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}));\n\nconst DeathChart = () => {\n  const { state } = useStateValue();\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      alignItems=\"flex-start\"\n      style={{}}\n      justify=\"center\"\n    >\n      <Grid item xs={10}>\n        <div style={{ height: \"85vh\", width: \"80vw\", display: \"flex\" }}>\n          <Paper className={classes.root} elevation={3}>\n            {state.countryData && (\n              <MyResponsiveBar data={getDeaths(state.countryData)} />\n            )}\n          </Paper>\n        </div>\n      </Grid>\n\n      <Grid item xs={2}>\n        <ListCountries />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default DeathChart;\n","import React from \"react\";\nimport GeneralCharts from \"../pages/GeneralCharts\";\nimport DeathChart from \"../pages/DeathChart\";\n\nconst PageStep = ({ step }) => {\n  switch (step) {\n    case 1:\n      return <GeneralCharts />;\n\n    case 2:\n      return <DeathChart />;\n\n    default:\n      break;\n  }\n};\n\nconst PageBase = ({ step }) => {\n  return <PageStep step={step} />;\n};\n\nexport default PageBase;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {\n  StateContext,\n  initialState,\n  reducer,\n} from \"./stateClient/stateCoronaFollow\";\n\nimport { getData, getCountries, getCountryData } from \"./stateClient/client\";\n\nimport UpperBar from \"./basicComponents/UpperBar\";\nimport PageBase from \"./components/PageBase\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  toolbar: theme.mixins.toolbar,\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  useEffect(() => {\n    getData().then((allData) => {\n      dispatch({\n        type: \"updateProperty\",\n        property: \"allData\",\n        info: allData,\n      });\n\n      dispatch({\n        type: \"updateProperty\",\n        property: \"countryData\",\n        info: getCountryData(\"Brazil\", allData),\n      });\n    });\n\n    getCountries().then((countries) => {\n      dispatch({\n        type: \"updateProperty\",\n        property: \"countries\",\n        info: countries,\n      });\n    });\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <StateContext.Provider value={{ state, dispatch }}>\n        <UpperBar name=\"Covid Follow-up\" />\n\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n\n          <PageBase step={state.activeStep} />\n        </main>\n      </StateContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}