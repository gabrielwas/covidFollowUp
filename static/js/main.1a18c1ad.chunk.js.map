{"version":3,"sources":["stateClient/stateCoronaFollow.js","stateClient/client.js","basicComponents/ListItemIns.js","components/SimpleMenu.js","basicComponents/UpperBar.js","components/ListCountries.js","chartComponents/LineVis.js","components/SliderDates.js","pages/GeneralCharts.js","chartComponents/BarVis.js","pages/DeathChart.js","components/PageBase.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","useStateValue","useContext","initialState","countryData","undefined","allData","countries","selectedCountry","daysRange","activeStep","reducer","state","action","type","property","info","getCountryData","countryName","data","rangeDays","result","id","startDate","Date","endDate","setDate","getDate","forEach","date","confirmed","recovered","deaths","parsedDate","find","push","x","y","days","months","getDeaths","deathData","prevDay","day","index","arr","dayWeek","getDay","dayOfMonth","month","getMonth","ListItemIns","name","nextStep","icon","dispatch","ListItem","button","key","onClick","ListItemIcon","ListItemText","primary","SimpleMenu","React","useState","anchorEl","setAnchorEl","IconButton","edge","color","aria-label","aria-controls","aria-haspopup","event","currentTarget","Menu","keepMounted","open","Boolean","onClose","List","useStyles","makeStyles","theme","appBar","zIndex","drawer","UpperBar","classes","CssBaseline","AppBar","position","className","Toolbar","Grid","justify","alignItems","container","item","Typography","variant","noWrap","listConfig","backgroundColor","palette","background","paper","overflow","maxHeight","ListCountries","component","map","progression","style","secondary","cases","toLocaleString","ITEMS","title","strokeWidth","LineVis","crosshairValues","setCrosshairValues","xType","margin","right","left","orientation","top","items","curve","onNearestX","value","d","values","itemsFormat","root","width","currentDate","firstDate","daysBetween","Math","floor","getTime","marks","label","getFullYear","SliderDates","Slider","onChange","newValue","aria-labelledby","max","height","card","flexGrow","GeneralCharts","spacing","sm","md","xs","Chip","Box","p","Paper","elevation","BarVis","bottom","tickLabelAngle","getLabel","labelAnchorX","labelAnchorY","DeathChart","PageStep","step","PageBase","display","content","padding","toolbar","mixins","App","useReducer","useEffect","fetch","then","response","json","Object","entries","confirmedCasesLast","length","confirmedCasesBeforeLast","newCountry","sort","a","b","Provider","window","location","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a18c1ad.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\n\nexport const StateContext = createContext();\nexport const useStateValue = () => useContext(StateContext);\n\nexport const initialState = {\n  countryData: undefined,\n  allData: undefined,\n  countries: undefined,\n  selectedCountry: \"Brazil\",\n  daysRange: undefined,\n  activeStep: 1,\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"updateProperty\":\n      return {\n        ...state,\n        [action.property]: action.info,\n      };\n\n    case \"updateSelectedCountry\":\n      return {\n        ...state,\n        selectedCountry: action.info,\n      };\n\n    default:\n      return state;\n  }\n};\n","export const getData = () => {\n  return fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      return data;\n    });\n};\n\nexport const getCountries = () => {\n  return fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      const countries = [];\n\n      for (let [key, value] of Object.entries(data)) {\n        const confirmedCasesLast =\n          value[value.length - 1].confirmed - value[value.length - 1].recovered;\n        const confirmedCasesBeforeLast =\n          value[value.length - 2].confirmed - value[value.length - 2].recovered;\n\n        let newCountry = {\n          name: key,\n          cases: value[value.length - 1].confirmed,\n          progression:\n            confirmedCasesLast < confirmedCasesBeforeLast ? false : true,\n        };\n        countries.push(newCountry);\n      }\n\n      countries.sort((a, b) => (a.cases < b.cases ? 1 : -1));\n\n      return countries;\n    });\n};\n\nexport const getCountryData = (countryName, data, rangeDays) => {\n  const result = [\n    {\n      id: \"Mortes\",\n      data: [],\n    },\n    {\n      id: \"Recuperados\",\n      data: [],\n    },\n    {\n      id: \"Casos Ativos\",\n      data: [],\n    },\n    {\n      id: \"Confirmados\",\n      data: [],\n    },\n  ];\n\n  let startDate = new Date(\"2020-03-03\");\n  let endDate = new Date(\"2020-03-03\");\n\n  startDate.setDate(startDate.getDate() + rangeDays[0]);\n  endDate.setDate(endDate.getDate() + rangeDays[1]);\n\n  data[countryName].forEach(({ date, confirmed, recovered, deaths }) => {\n    let parsedDate = new Date(date);\n\n    if (parsedDate > startDate && parsedDate < endDate) {\n      result\n        .find(({ id }) => id === \"Confirmados\")\n        .data.push({\n          x: parsedDate,\n          y: confirmed,\n        });\n\n      result\n        .find(({ id }) => id === \"Recuperados\")\n        .data.push({\n          x: parsedDate,\n          y: recovered,\n        });\n\n      result\n        .find(({ id }) => id === \"Mortes\")\n        .data.push({\n          x: parsedDate,\n          y: deaths,\n        });\n\n      result\n        .find(({ id }) => id === \"Casos Ativos\")\n        .data.push({\n          x: parsedDate,\n          y: confirmed - recovered,\n        });\n    }\n  });\n\n  return result;\n};\n\nvar days = [\"Dom\", \"Seg\", \"Ter\", \"Qua\", \"Qui\", \"Sex\", \"Sab\"];\nvar months = [\n  \"Jan\",\n  \"Fev\",\n  \"Mar\",\n  \"Abr\",\n  \"Mai\",\n  \"Jun\",\n  \"Jul\",\n  \"Ago\",\n  \"Set\",\n  \"Out\",\n  \"Nov\",\n  \"Dez\",\n];\n\nexport const getDeaths = (countryData, rangeDays) => {\n  const deathData = [];\n\n  let prevDay = {\n    y: 0,\n  };\n\n  let startDate = new Date(\"2020-03-03\");\n  let endDate = new Date(\"2020-03-03\");\n\n  startDate.setDate(startDate.getDate() + rangeDays[0] + 1);\n  endDate.setDate(endDate.getDate() + rangeDays[1]);\n\n  countryData\n    .find(({ id }) => id === \"Mortes\")\n    .data.forEach((day, index, arr) => {\n      if (index > 0) {\n        prevDay = arr[index - 1];\n      }\n\n      const parsedDate = new Date(day.x);\n      if (parsedDate > startDate && parsedDate < endDate) {\n        const dayWeek = days[parsedDate.getDay()];\n        const dayOfMonth = parsedDate.getDate();\n        const month = months[parsedDate.getMonth()];\n\n        deathData.push({\n          x: `${dayWeek} ${dayOfMonth} ${month}`,\n          y: day.y - prevDay.y,\n        });\n      }\n    });\n\n  return deathData;\n};\n","import React from \"react\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\n\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\n\nconst ListItemIns = ({ name, nextStep, icon }) => {\n  const { dispatch } = useStateValue();\n\n  return (\n    <ListItem\n      button\n      key={name}\n      onClick={() =>\n        dispatch({\n          type: \"updateProperty\",\n          property: \"activeStep\",\n          info: nextStep\n        })\n      }\n    >\n      <ListItemIcon>{icon}</ListItemIcon>\n      <ListItemText primary={name} />\n    </ListItem>\n  );\n};\n\nexport default ListItemIns;\n","import React from \"react\";\nimport Menu from \"@material-ui/core/Menu\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ListItemIns from \"../basicComponents/ListItemIns\";\nimport List from \"@material-ui/core/List\";\n\nimport ShowChartIcon from \"@material-ui/icons/ShowChart\";\nimport EqualizerIcon from \"@material-ui/icons/Equalizer\";\n\nexport default function SimpleMenu() {\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <IconButton\n        edge=\"start\"\n        color=\"inherit\"\n        aria-label=\"menu\"\n        aria-controls=\"simple-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MenuIcon />\n      </IconButton>\n      <Menu\n        id=\"simple-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={Boolean(anchorEl)}\n        onClose={handleClose}\n      >\n        <List>\n          <ListItemIns\n            name={\"Gráfico Geral\"}\n            nextStep={1}\n            icon={<ShowChartIcon />}\n          />\n\n          <ListItemIns name={\"Mortes\"} nextStep={2} icon={<EqualizerIcon />} />\n        </List>\n      </Menu>\n    </>\n  );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport SimpleMenu from \"../components/SimpleMenu\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n}));\n\nconst UpperBar = ({ name }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Grid\n            justify=\"space-between\"\n            alignItems=\"center\"\n            container\n          >\n             <Grid item>\n              <SimpleMenu />\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h6\" noWrap>\n                {name}\n              </Typography>\n            </Grid>\n\n           \n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\nexport default UpperBar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport { getCountryData } from \"../stateClient/client\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nconst useStyles = makeStyles((theme) => ({\n  listConfig: {\n    backgroundColor: theme.palette.background.paper,\n    position: \"relative\",\n    overflow: \"auto\",\n    maxHeight: \"75vh\",\n  },\n}));\n\nconst ListCountries = () => {\n  const { state, dispatch } = useStateValue();\n  const classes = useStyles();\n\n  const onChangeCountry = (countryName) => {\n    dispatch({\n      type: \"updateProperty\",\n      property: \"selectedCountry\",\n      info: countryName,\n    });\n\n    dispatch({\n      type: \"updateProperty\",\n      property: \"countryData\",\n      info: getCountryData(\n        countryName,\n        state.allData,\n        state.daysRange\n      ),\n    });\n  };\n\n  return (\n    <div className={classes.listConfig}>\n      <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n        {state.countries &&\n          state.countries.map((item) => (\n            <ListItem\n              key={item.name}\n              button\n              onClick={() => onChangeCountry(item.name)}\n            >\n              {item.progression ? (\n                <ListItemIcon>\n                  <ArrowUpwardIcon style={{ color: \"#ff3300\" }} />\n                </ListItemIcon>\n              ) : (\n                <ListItemIcon>\n                  <ArrowDownwardIcon style={{ color: \"#33cc33\" }} />\n                </ListItemIcon>\n              )}\n\n              <ListItemText\n                primary={item.name}\n                secondary={\"Casos: \" + item.cases.toLocaleString(\"pt-BR\")}\n              />\n            </ListItem>\n          ))}\n      </List>\n    </div>\n  );\n};\n\nexport default ListCountries;\n","import React, { useState } from \"react\";\n\nimport \"../../node_modules/react-vis/dist/style.css\";\n\nimport {\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  FlexibleXYPlot,\n  LineMarkSeries,\n  DiscreteColorLegend,\n  Crosshair,\n} from \"react-vis\";\n\nconst ITEMS = [\n  { title: \"Confirmados\", color: \"#3498DB\", strokeWidth: 12 },\n  { title: \"Casos Ativos\", color: \"#F1C40F\", strokeWidth: 12 },\n  { title: \"Recuperados\", color: \"#16A085\", strokeWidth: 12 },\n  { title: \"Mortes\", color: \"#E74C3C\", strokeWidth: 12 },\n];\n\nconst LineVis = ({ data }) => {\n  const [crosshairValues, setCrosshairValues] = useState([]);\n\n  // const titleFormating = (d) => {\n  //   console.log(d);\n\n  //   const result = {\n  //     title: \"Date\",\n  //     value: d[0].y,\n  //   };\n\n  //   return result;\n  // };\n\n  const titleFormating = (d) => [\n    {\n      title: \"Confirmados\",\n      value: d[3].y,\n    },\n    {\n      title: \"Casos Ativos\",\n      value: d[2].y,\n    },\n    {\n      title: \"Recuperados\",\n      value: d[1].y,\n    },\n    {\n      title: \"Mortes\",\n      value: d[0].y,\n    },\n  ];\n\n  return (\n    <FlexibleXYPlot xType=\"time\" margin={{ right: 65, left: 10 }}>\n      <HorizontalGridLines />\n      <VerticalGridLines />\n      <XAxis />\n      <YAxis orientation=\"right\" />\n      <DiscreteColorLegend\n        style={{ position: \"absolute\", left: \"5%\", top: \"5%\" }}\n        items={ITEMS}\n      />\n\n      <LineMarkSeries\n        className=\"linemark-series-example-2\"\n        curve={\"curveMonotoneX\"}\n        data={data[3].data}\n        color=\"#3498DB\"\n        onNearestX={(value, { index }) =>\n          setCrosshairValues(data.map((d) => d.data[index]))\n        }\n      />\n\n      <LineMarkSeries\n        className=\"linemark-series-example-2\"\n        curve={\"curveMonotoneX\"}\n        data={data[2].data}\n        color=\"#F1C40F\"\n      />\n\n      <LineMarkSeries\n        className=\"linemark-series-example-2\"\n        curve={\"curveMonotoneX\"}\n        data={data[1].data}\n        color=\"#16A085\"\n      />\n\n      <LineMarkSeries\n        className=\"linemark-series-example-2\"\n        curve={\"curveMonotoneX\"}\n        data={data[0].data}\n        color=\"#E74C3C\"\n      />\n      <Crosshair values={crosshairValues} itemsFormat={titleFormating} />\n    </FlexibleXYPlot>\n  );\n};\n\nexport default LineVis;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport Slider from \"@material-ui/core/Slider\";\n\nimport { getCountryData } from \"../stateClient/client\";\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"90%\",\n  },\n});\n\nlet currentDate = new Date();\nlet firstDate = new Date(\"2020-03-03\");\n\nconst daysBetween = Math.floor(\n  (currentDate.getTime() - firstDate.getTime()) / (1000 * 3600 * 24)\n);\n\nconst marks = [\n  {\n    value: 0,\n    label: \"03-03-2020\",\n  },\n  {\n    value: daysBetween,\n    label: `${currentDate.getDate()}-${\n      currentDate.getMonth() + 1\n    }-${currentDate.getFullYear()}`,\n  },\n];\n\nconst SliderDates = () => {\n  const classes = useStyles();\n  const { state, dispatch } = useStateValue();\n\n  const handleSliderChange = (event, newValue) => {\n    dispatch({\n      type: \"updateProperty\",\n      property: \"daysRange\",\n      info: newValue,\n    });\n\n    dispatch({\n      type: \"updateProperty\",\n      property: \"countryData\",\n      info: getCountryData(state.selectedCountry, state.allData, newValue),\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Slider\n        value={state.daysRange}\n        onChange={handleSliderChange}\n        aria-labelledby=\"range-slider\"\n        marks={marks}\n        max={daysBetween}\n      />\n    </div>\n  );\n};\n\nexport default SliderDates;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ListCountries from \"../components/ListCountries\";\nimport Chip from \"@material-ui/core/Chip\";\n\nimport LineVis from \"../chartComponents/LineVis\";\n\nimport Box from \"@material-ui/core/Box\";\nimport SliderDates from \"../components/SliderDates\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  card: {\n    flexGrow: 1,\n  },\n}));\n\nconst GeneralCharts = () => {\n  const { state } = useStateValue();\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2} alignItems=\"center\" justify=\"center\" style={{}}>\n      <Grid item sm={12} md={10}>\n\n        <Grid container spacing={0} >\n          <Grid item sm={12} md={6} xs={12}>\n            <Chip label={state.selectedCountry} />\n          </Grid>\n\n          <Grid item sm={12} md={6} xs={12}>\n            {state.daysRange && <SliderDates/>}\n          </Grid>\n\n          <Grid item sm={12} md={12} xs={12}>\n            <Box p={1}>\n              <div style={{ height: \"80vh\", width: \"80vw\" }}>\n                <Paper className={classes.root} elevation={3}>\n                  {state.countryData && <LineVis data={state.countryData} />}\n                </Paper>\n              </div>\n            </Box>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid item sm={12} md={2}>\n        <Box>\n          <ListCountries />\n        </Box>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default GeneralCharts;\n","import React from \"react\";\nimport \"../../node_modules/react-vis/dist/style.css\";\nimport {\n  XAxis,\n  YAxis,\n  HorizontalGridLines,\n  VerticalGridLines,\n  FlexibleXYPlot,\n  VerticalBarSeries,\n  LabelSeries,\n} from \"react-vis\";\n\n\n\nconst BarVis = ({ data }) => {\n\n  return (\n    <FlexibleXYPlot xType=\"ordinal\"  margin={{ right: 65, left: 10, bottom: 80 }}>\n      <HorizontalGridLines />\n      <VerticalGridLines />\n      <XAxis tickLabelAngle={-90}/>\n      <YAxis orientation=\"right\" />\n\n      <VerticalBarSeries className=\"vertical-bar-series-example\" data={data} color=\"#CB4335\"/>\n      <LabelSeries data={data} getLabel={d => d.y} labelAnchorX=\"middle\" labelAnchorY=\"text-after-edge\"/>\n\n    </FlexibleXYPlot>\n  );\n};\n\nexport default BarVis;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ListCountries from \"../components/ListCountries\";\nimport Chip from \"@material-ui/core/Chip\";\n\nimport { getDeaths } from \"../stateClient/client\";\nimport BarVis from \"../chartComponents/BarVis\";\n\nimport Box from \"@material-ui/core/Box\";\nimport SliderDates from \"../components/SliderDates\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}));\n\nconst DeathChart = () => {\n  const { state } = useStateValue();\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={2} alignItems=\"center\" justify=\"center\" style={{}}>\n      <Grid item sm={12} md={10}>\n        <Grid container spacing={0} className={classes.root}>\n          <Grid item sm={12} md={6} xs={12}>\n            <Chip label={state.selectedCountry} />\n          </Grid>\n\n          <Grid item sm={12} md={6} xs={12}>\n            {state.daysRange && <SliderDates />}\n          </Grid>\n\n          <Grid item sm={12} md={12} xs={12}>\n            <Box p={1}>\n              <div style={{ height: \"80vh\", width: \"80vw\" }}>\n                <Paper className={classes.root} elevation={3}>\n                  {state.countryData && state.daysRange && (\n                    <BarVis data={getDeaths(state.countryData, state.daysRange)} />\n                  )}\n                </Paper>\n              </div>\n            </Box>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Grid item sm={12} md={2}>\n        <Box>\n          <ListCountries />\n        </Box>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default DeathChart;\n","import React from \"react\";\nimport GeneralCharts from \"../pages/GeneralCharts\";\nimport DeathChart from \"../pages/DeathChart\";\n\nconst PageStep = ({ step }) => {\n  switch (step) {\n    case 1:\n      return <GeneralCharts />;\n\n    case 2:\n      return <DeathChart />;\n\n    default:\n      break;\n  }\n};\n\nconst PageBase = ({ step }) => {\n  return <PageStep step={step} />;\n};\n\nexport default PageBase;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport {\n  StateContext,\n  initialState,\n  reducer,\n} from \"./stateClient/stateCoronaFollow\";\n\nimport { getData, getCountries, getCountryData } from \"./stateClient/client\";\n\nimport UpperBar from \"./basicComponents/UpperBar\";\nimport PageBase from \"./components/PageBase\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  toolbar: theme.mixins.toolbar,\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  useEffect(() => {\n    let currentDate = new Date();\n    let firstDate = new Date(\"2020-03-03\");\n\n    const daysBetween = Math.floor(\n      (currentDate.getTime() - firstDate.getTime()) / (1000 * 3600 * 24)\n    );\n\n    dispatch({\n      type: \"updateProperty\",\n      property: \"daysRange\",\n      info: [0, daysBetween],\n    });\n\n    getData().then((allData) => {\n      dispatch({\n        type: \"updateProperty\",\n        property: \"allData\",\n        info: allData,\n      });\n\n      dispatch({\n        type: \"updateProperty\",\n        property: \"countryData\",\n        info: getCountryData(\"Brazil\", allData, [0, daysBetween]),\n      });\n    });\n\n    getCountries().then((countries) => {\n      dispatch({\n        type: \"updateProperty\",\n        property: \"countries\",\n        info: countries,\n      });\n    });\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <StateContext.Provider value={{ state, dispatch }}>\n        <UpperBar name=\"Covid Follow-up\" />\n\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n\n          <PageBase step={state.activeStep} />\n        </main>\n      </StateContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}