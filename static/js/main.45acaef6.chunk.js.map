{"version":3,"sources":["stateClient/stateCoronaFollow.js","stateClient/client.js","basicComponents/UpperBar.js","basicComponents/ListItemIns.js","basicComponents/SidebarIns.js","components/Sidebar.js","chartComponents/MyResponsiveLine.js","components/ListCountries.js","pages/GeneralCharts.js","chartComponents/MyResponsiveBar.js","pages/DeathChart.js","components/PageBase.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","useStateValue","useContext","initialState","countryData","undefined","allData","countries","selectedCountry","activeStep","reducer","state","action","type","property","info","getCountryData","countryName","data","result","id","forEach","date","confirmed","recovered","deaths","fixedDate","Date","find","push","x","y","days","months","getDeaths","prevDay","deathData","day","startDate","setDate","getDate","iDate","dayWeek","getDay","dayOfMonth","month","getMonth","useStyles","makeStyles","theme","appBar","zIndex","drawer","UpperBar","name","classes","CssBaseline","AppBar","position","className","Toolbar","Grid","justify","container","item","Typography","variant","noWrap","ListItemIns","nextStep","icon","dispatch","ListItem","button","key","onClick","ListItemIcon","ListItemText","primary","width","flexShrink","drawerPaper","toolbar","mixins","SidebarIns","children","Drawer","paper","List","Sidebar","MyResponsiveLine","margin","top","right","bottom","left","xScale","format","precision","yScale","min","max","stacked","reverse","xFormat","axisTop","axisRight","axisBottom","orient","tickSize","tickPadding","tickRotation","legendOffset","legendPosition","axisLeft","colors","scheme","pointSize","pointColor","pointBorderWidth","pointBorderColor","from","pointLabel","pointLabelYOffset","useMesh","legends","anchor","direction","translateX","translateY","itemsSpacing","itemDirection","itemWidth","itemHeight","itemOpacity","symbolSize","symbolShape","symbolBorderColor","effects","on","style","itemBackground","listConfig","backgroundColor","palette","background","overflow","maxHeight","minWidth","ListCountries","component","aria-label","map","progression","color","secondary","cases","toLocaleString","root","height","GeneralCharts","spacing","alignItems","xs","display","Paper","elevation","MyResponsiveBar","keys","indexBy","padding","defs","size","stagger","rotation","lineWidth","fill","match","borderColor","modifiers","legend","labelSkipWidth","labelSkipHeight","labelTextColor","animate","motionStiffness","motionDamping","DeathChart","PageStep","step","PageBase","content","flexGrow","App","React","useReducer","useEffect","fetch","then","response","json","Object","entries","value","confirmedCasesLast","length","confirmedCasesBeforeLast","newCountry","sort","a","b","Provider","Boolean","window","location","hostname","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.45acaef6.chunk.js","sourcesContent":["import { createContext, useContext } from \"react\";\n\nexport const StateContext = createContext();\nexport const useStateValue = () => useContext(StateContext);\n\nexport const initialState = {\n  countryData: undefined,\n  allData: undefined,\n  countries: undefined,\n  selectedCountry: \"Brazil\",\n  activeStep: 1,\n};\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"updateProperty\":\n      return {\n        ...state,\n        [action.property]: action.info,\n      };\n\n    case \"updateSelectedCountry\":\n      return {\n        ...state,\n        selectedCountry: action.info,\n      };\n\n    default:\n      return state;\n  }\n};\n","export const getData = () => {\n  return fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      return data;\n    });\n};\n\nexport const getCountries = () => {\n  return fetch(\"https://pomber.github.io/covid19/timeseries.json\")\n    .then((response) => response.json())\n    .then((data) => {\n      const countries = [];\n\n      for (let [key, value] of Object.entries(data)) {\n        const confirmedCasesLast =\n          value[value.length - 1].confirmed - value[value.length - 1].recovered;\n        const confirmedCasesBeforeLast =\n          value[value.length - 2].confirmed - value[value.length - 2].recovered;\n\n        let newCountry = {\n          name: key,\n          cases: value[value.length - 1].confirmed,\n          progression:\n            confirmedCasesLast < confirmedCasesBeforeLast ? false : true,\n        };\n        countries.push(newCountry);\n      }\n\n      countries.sort((a, b) => (a.cases < b.cases ? 1 : -1));\n\n      return countries;\n    });\n};\n\nexport const getCountryData = (countryName, data) => {\n  const result = [\n    {\n      id: \"Mortes\",\n      data: [],\n    },\n    {\n      id: \"Recuperados\",\n      data: [],\n    },\n    {\n      id: \"Casos Ativos\",\n      data: [],\n    },\n    {\n      id: \"Confirmados\",\n      data: [],\n    },\n  ];\n\n  data[countryName].forEach(({ date, confirmed, recovered, deaths }) => {\n    let fixedDate = new Date(\"2020-03-03\");\n    let parsedDate = new Date(date);\n\n    if (parsedDate > fixedDate) {\n      result\n        .find(({ id }) => id === \"Confirmados\")\n        .data.push({\n          x: date,\n          y: confirmed,\n        });\n\n      result\n        .find(({ id }) => id === \"Recuperados\")\n        .data.push({\n          x: date,\n          y: recovered,\n        });\n\n      result\n        .find(({ id }) => id === \"Mortes\")\n        .data.push({\n          x: date,\n          y: deaths,\n        });\n\n      result\n        .find(({ id }) => id === \"Casos Ativos\")\n        .data.push({\n          x: date,\n          y: confirmed - recovered,\n        });\n    }\n  });\n\n  return result;\n};\n\nvar days = [\"Dom\", \"Seg\", \"Ter\", \"Qua\", \"Qui\", \"Sex\", \"Sab\"];\nvar months = [\n  \"Jan\",\n  \"Fev\",\n  \"Mar\",\n  \"Abr\",\n  \"Mai\",\n  \"Jun\",\n  \"Jul\",\n  \"Ago\",\n  \"Set\",\n  \"Out\",\n  \"Nov\",\n  \"Dez\",\n];\n\nexport const getDeaths = (countryData) => {\n  const deathData = [];\n\n  let prevDay;\n\n  countryData\n    .find(({ id }) => id === \"Mortes\")\n    .data.forEach((day) => {\n      let startDate = new Date();\n\n      startDate.setDate(startDate.getDate() - 15);\n\n      const iDate = new Date(day.x);\n      if (iDate > startDate) {\n        const dayWeek = days[iDate.getDay()];\n        const dayOfMonth = iDate.getDate();\n        const month = months[iDate.getMonth()];\n\n        deathData.push({\n          date: `${dayWeek} ${dayOfMonth} ${month}`,\n          deaths: day.y - prevDay.y,\n        });\n      }\n\n      prevDay = day;\n    });\n\n  return deathData;\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n}));\n\nconst UpperBar = ({ name }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <CssBaseline />\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Grid\n            justify=\"space-between\" // Add it here :)\n            container\n          >\n            <Grid item>\n              <Typography variant=\"h6\" noWrap>\n                {name}\n              </Typography>\n            </Grid>\n          </Grid>\n        </Toolbar>\n      </AppBar>\n    </>\n  );\n};\n\nexport default UpperBar;\n","import React from \"react\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\n\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\n\nconst ListItemIns = ({ name, nextStep, icon }) => {\n  const { dispatch } = useStateValue();\n\n  return (\n    <ListItem\n      button\n      key={name}\n      onClick={() =>\n        dispatch({\n          type: \"updateProperty\",\n          property: \"activeStep\",\n          info: nextStep\n        })\n      }\n    >\n      <ListItemIcon>{icon}</ListItemIcon>\n      <ListItemText primary={name} />\n    </ListItem>\n  );\n};\n\nexport default ListItemIns;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\n\nconst useStyles = makeStyles(theme => ({\n  drawer: {\n    width: 240,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: 240\n  },\n  toolbar: theme.mixins.toolbar\n}));\n\nconst SidebarIns = ({ children }) => {\n  const classes = useStyles();\n\n  return (\n    <Drawer\n      className={classes.drawer}\n      variant=\"permanent\"\n      classes={{\n        paper: classes.drawerPaper\n      }}\n    >\n      <div className={classes.toolbar} />\n      \n      <List>{children}</List>\n    </Drawer>\n  );\n};\n\nexport default SidebarIns;\n","import React from \"react\";\nimport ListItemIns from \"../basicComponents/ListItemIns\";\nimport SidebarIns from \"../basicComponents/SidebarIns\";\n\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\n\nconst Sidebar = () => {\n  return (\n    <SidebarIns>\n      <ListItemIns\n        name={\"Gráfico Geral\"}\n        nextStep={1}\n        icon={<ShowChartIcon />}\n      />\n\n    <ListItemIns\n        name={\"Mortes\"}\n        nextStep={2}\n        icon={<EqualizerIcon />}\n      />\n    </SidebarIns>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport { ResponsiveLine } from \"@nivo/line\";\n\nconst MyResponsiveLine = ({ data }) => (\n    <ResponsiveLine\n      data={data}\n      margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\n      xScale={{\n        type: \"time\",\n        format: \"%Y-%m-%d\",\n        precision: \"day\",\n      }}\n      yScale={{\n        type: \"linear\",\n        min: \"auto\",\n        max: \"auto\",\n        stacked: false,\n        reverse: false,\n      }}\n      xFormat=\"time:%d %b\"\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        orient: \"bottom\",\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 50,\n        legendOffset: 36,\n        legendPosition: \"middle\",\n        format: \"%b %d\",\n      }}\n      axisLeft={{\n        orient: \"left\",\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legendOffset: -40,\n        legendPosition: \"middle\",\n      }}\n      colors={{ scheme: \"set1\" }}\n      pointSize={4}\n      pointColor={{ theme: \"background\" }}\n      pointBorderWidth={2}\n      pointBorderColor={{ from: \"serieColor\" }}\n      pointLabel=\"y\"\n      pointLabelYOffset={-12}\n      useMesh={true}\n      legends={[\n        {\n          anchor: \"top\",\n          direction: \"row\",\n          justify: false,\n          translateX: -400,\n          translateY: -36,\n          itemsSpacing: 0,\n          itemDirection: \"left-to-right\",\n          itemWidth: 100,\n          itemHeight: 20,\n          itemOpacity: 0.75,\n          symbolSize: 18,\n          symbolShape: \"circle\",\n          symbolBorderColor: \"rgba(0, 0, 0, .5)\",\n          effects: [\n            {\n              on: \"hover\",\n              style: {\n                itemBackground: \"rgba(0, 0, 0, .03)\",\n                itemOpacity: 1,\n              },\n            },\n          ],\n        },\n      ]}\n    />\n  );\n\n  export default MyResponsiveLine;","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport { getCountryData } from \"../stateClient/client\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nconst useStyles = makeStyles((theme) => ({\n  listConfig: {\n    backgroundColor: theme.palette.background.paper,\n    position: \"relative\",\n    overflow: \"auto\",\n    maxHeight: \"85vh\",\n    minWidth: \"25vh\",\n  },\n}));\n\nconst ListCountries = () => {\n  const { state, dispatch } = useStateValue();\n  const classes = useStyles();\n\n  const onChangeCountry = (countryName) => {\n    dispatch({\n      type: \"updateProperty\",\n      property: \"selectedCountry\",\n      info: countryName,\n    });\n\n    dispatch({\n      type: \"updateProperty\",\n      property: \"countryData\",\n      info: getCountryData(countryName, state.allData),\n    });\n  };\n\n  return (\n    <div className={classes.listConfig}>\n      <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n        {state.countries &&\n          state.countries.map((item) => (\n            <ListItem\n              key={item.name}\n              button\n              onClick={() => onChangeCountry(item.name)}\n            >\n              {item.progression ? (\n                <ListItemIcon>\n                  <ArrowUpwardIcon style={{ color: \"#ff3300\" }} />\n                </ListItemIcon>\n              ) : (\n                <ListItemIcon>\n                  <ArrowDownwardIcon style={{ color: \"#33cc33\" }} />\n                </ListItemIcon>\n              )}\n\n              <ListItemText\n                primary={item.name}\n                secondary={\"Casos: \" + item.cases.toLocaleString(\"pt-BR\")}\n              />\n            </ListItem>\n          ))}\n      </List>\n    </div>\n  );\n};\n\nexport default ListCountries;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport MyResponsiveLine from \"../chartComponents/MyResponsiveLine\";\nimport ListCountries from \"../components/ListCountries\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}));\n\nconst GeneralCharts = () => {\n  const { state } = useStateValue();\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      alignItems=\"flex-start\"\n      style={{}}\n      justify=\"center\"\n    >\n      <Grid item xs={2}>\n        <ListCountries />\n      </Grid>\n\n      <Grid item xs={10}>\n        <div style={{ height: \"85vh\", width: \"70vw\", display: \"flex\" }}>\n          <Paper className={classes.root} elevation={3}>\n            {state.countryData && <MyResponsiveLine data={state.countryData} />}\n          </Paper>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default GeneralCharts;\n","import React from \"react\";\nimport { ResponsiveBar } from \"@nivo/bar\";\n\nconst MyResponsiveBar = ({ data }) => {\n  return (\n    <ResponsiveBar\n      data={data}\n      keys={[\"deaths\"]}\n      indexBy=\"date\"\n      margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n      padding={0.3}\n      colors={{ scheme: \"set1\" }}\n      defs={[\n        {\n          id: \"dots\",\n          type: \"patternDots\",\n          background: \"inherit\",\n          color: \"#38bcb2\",\n          size: 4,\n          padding: 1,\n          stagger: true,\n        },\n        {\n          id: \"lines\",\n          type: \"patternLines\",\n          background: \"inherit\",\n          color: \"#eed312\",\n          rotation: -45,\n          lineWidth: 6,\n          spacing: 10,\n        },\n      ]}\n      fill={[\n        {\n          match: {\n            id: \"fries\",\n          },\n          id: \"dots\",\n        },\n        {\n          match: {\n            id: \"sandwich\",\n          },\n          id: \"lines\",\n        },\n      ]}\n      borderColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\n      axisTop={null}\n      axisRight={null}\n      axisBottom={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Dia\",\n        legendPosition: \"middle\",\n        legendOffset: 32,\n      }}\n      axisLeft={{\n        tickSize: 5,\n        tickPadding: 5,\n        tickRotation: 0,\n        legend: \"Quantidade\",\n        legendPosition: \"middle\",\n        legendOffset: -50,\n      }}\n      labelSkipWidth={12}\n      labelSkipHeight={12}\n      labelTextColor={{ from: \"color\", modifiers: [[\"darker\", 1.6]] }}\n      legends={[]}\n      animate={true}\n      motionStiffness={90}\n      motionDamping={15}\n    />\n  );\n};\n\nexport default MyResponsiveBar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { useStateValue } from \"../stateClient/stateCoronaFollow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport ListCountries from \"../components/ListCountries\";\nimport MyResponsiveBar from '../chartComponents/MyResponsiveBar';\n\nimport {getDeaths} from \"../stateClient/client\"\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n}));\n\nconst DeathChart = () => {\n  const { state } = useStateValue();\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      spacing={2}\n      alignItems=\"flex-start\"\n      style={{}}\n      justify=\"center\"\n    >\n      <Grid item xs={2}>\n        <ListCountries />\n      </Grid>\n\n      <Grid item xs={10}>\n        <div style={{ height: \"85vh\", width: \"70vw\", display: \"flex\" }}>\n          <Paper className={classes.root} elevation={3}>\n            {state.countryData && <MyResponsiveBar data={getDeaths(state.countryData)} />}\n          </Paper>\n        </div>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default DeathChart;\n","import React from \"react\";\nimport GeneralCharts from \"../pages/GeneralCharts\";\nimport DeathChart from \"../pages/DeathChart\";\n\nconst PageStep = ({ step }) => {\n  switch (step) {\n    case 1:\n      return <GeneralCharts />;\n\n    case 2:\n      return <DeathChart />;\n\n    default:\n      break;\n  }\n};\n\nconst PageBase = ({ step }) => {\n  return <PageStep step={step} />;\n};\n\nexport default PageBase;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport { StateContext, initialState, reducer } from \"./stateClient/stateCoronaFollow\";\n\nimport { getData, getCountries, getCountryData } from \"./stateClient/client\";\n\nimport UpperBar from \"./basicComponents/UpperBar\";\nimport Sidebar from \"./components/Sidebar\";\nimport PageBase from \"./components/PageBase\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing(3),\n  },\n  toolbar: theme.mixins.toolbar,\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n\n  useEffect(() => {\n    getData().then((allData) => {\n      dispatch({\n        type: \"updateProperty\",\n        property: \"allData\",\n        info: allData,\n      });\n\n      dispatch({\n        type: \"updateProperty\",\n        property: \"countryData\",\n        info: getCountryData(\"Brazil\", allData),\n      });\n    });\n\n    getCountries().then((countries) => {\n      dispatch({\n        type: \"updateProperty\",\n        property: \"countries\",\n        info: countries,\n      });\n    });\n  }, []);\n\n  return (\n    <div className={classes.root}>\n      <StateContext.Provider value={{ state, dispatch }}>\n        <UpperBar name=\"Covid Follow-up\" />\n\n        <Sidebar />\n\n        <main className={classes.content}>\n          <div className={classes.toolbar} />\n\n          <PageBase step={state.activeStep} />\n        </main>\n      </StateContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}